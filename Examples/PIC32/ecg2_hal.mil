_ecg2_hal_cs:
  begin   (midx: 0)
//ecg2_hal.c,68 :: 		void ecg2_hal_cs( uint8_t logic )
_ecg2_hal_cs:
  begin   (midx: 0)
//ecg2_hal.c,70 :: 		ECG2_CS = logic;
	R2 <1> <- LX(ECG2_CS)   (midx: 0)
	ECG2_CS <0> <- FARG_ecg2_hal_cs_logic   (midx: 0)
	LX(ECG2_CS) <1> <- R2   (midx: 0)
  end
   (midx: 0)
_ecg2_hal_rts:
  begin   (midx: 0)
//ecg2_hal.c,73 :: 		void ecg2_hal_rts ( uint8_t logic )
_ecg2_hal_rts:
  begin   (midx: 0)
//ecg2_hal.c,75 :: 		ECG2_RESET = logic;
	R2 <1> <- LX(ECG2_RESET)   (midx: 0)
	ECG2_RESET <0> <- FARG_ecg2_hal_rts_logic   (midx: 0)
	LX(ECG2_RESET) <1> <- R2   (midx: 0)
  end
   (midx: 0)
_ecg2_hal_init:
  begin   (midx: 0)
//ecg2_hal.c,78 :: 		void ecg2_hal_init()
_ecg2_hal_init:
  begin   (midx: 0)
//ecg2_hal.c,86 :: 		write_spi_ptr = SPI_Write;
	R2 <4> <- #_SPI_Write   (midx: 0)
	ecg2_hal_write_spi_ptr <4> <- R2   (midx: 0)
//ecg2_hal.c,87 :: 		read_spi_ptr  = SPI_Read;
	R2 <4> <- #_SPI_Read   (midx: 0)
	ecg2_hal_read_spi_ptr <4> <- R2   (midx: 0)
  end
   (midx: 0)
_ecg2_hal_read_bytes:
  begin   (midx: 0)
//ecg2_hal.c,94 :: 		int8_t ecg2_hal_read_bytes( uint8_t reg, uint8_t* buffer_in, uint8_t num_bytes)
_ecg2_hal_read_bytes:
  begin   (midx: 0)
//ecg2_hal.c,96 :: 		if (reg > 0b00011111)
	R25 <4> <- PUSH(R25)   (midx: 0)
	R2 <4> <- FARG_ecg2_hal_read_bytes_reg   (midx: 0)
	if ( R2 <= 32) then goto 0   (midx: 0)
//ecg2_hal.c,97 :: 		return -1;
	R2 <1> <- -1   (midx: 0)
	return   (midx: 0)
0:   (midx: 0)
//ecg2_hal.c,98 :: 		if (num_bytes > 0b00011111)
	R2 <4> <- FARG_ecg2_hal_read_bytes_num_bytes   (midx: 0)
	if ( R2 <= 32) then goto 1   (midx: 0)
//ecg2_hal.c,99 :: 		return -1;
	R2 <1> <- -1   (midx: 0)
	return   (midx: 0)
1:   (midx: 0)
//ecg2_hal.c,103 :: 		uint8_t *temp_bfr_ptr = buffer_in;
	ecg2_hal_read_bytes_temp_bfr_ptr_L1 <4> <- FARG_ecg2_hal_read_bytes_buffer_in   (midx: 0)
//ecg2_hal.c,104 :: 		opcode[0] = 0b00100000;
	R3 <4> <- addr(ecg2_hal_read_bytes_opcode_L1)   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
//ecg2_hal.c,105 :: 		opcode[0] |= reg;
	R2 <1> <- *R3   (midx: 0)
	R2 <1> <-  R2 | FARG_ecg2_hal_read_bytes_reg   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
//ecg2_hal.c,106 :: 		opcode[1] = 0;
	R2 <4> <-  R3 + 1   (midx: 2)
	[R2] <1> <- 0   (midx: 0)
//ecg2_hal.c,107 :: 		opcode[1] |= num_bytes;
	R3 <4> <-  R3 + 1   (midx: 2)
	R2 <1> <- *R3   (midx: 0)
	R2 <1> <-  R2 | FARG_ecg2_hal_read_bytes_num_bytes   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
//ecg2_hal.c,109 :: 		ECG2_hal_cs(0);
	R25 <1> <- 0   (midx: 0)
	CALL _ecg2_hal_cs   (midx: 0)
//ecg2_hal.c,110 :: 		delay_ms(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_hal.c,111 :: 		write_spi_ptr( opcode[0] );
	R2 <4> <- addr(ecg2_hal_read_bytes_opcode_L1)   (midx: 0)
	FARG_ecg2_hal_read_bytes_num_bytes <1> <- PUSH(FARG_ecg2_hal_read_bytes_num_bytes)   (midx: 255)
	R25 <4> <- [R2]   (midx: 0)
	R30 <4> <- ecg2_hal_write_spi_ptr   (midx: 0)
	CALL (*R30)   (midx: 0)
	FARG_ecg2_hal_read_bytes_num_bytes <1> <- POP   (midx: 255)
//ecg2_hal.c,112 :: 		write_spi_ptr( opcode[1] );
	R2 <4> <- addr(ecg2_hal_read_bytes_opcode_L1)   (midx: 0)
	R2 <4> <-  R2 + 1   (midx: 2)
	FARG_ecg2_hal_read_bytes_num_bytes <1> <- PUSH(FARG_ecg2_hal_read_bytes_num_bytes)   (midx: 255)
	R25 <4> <- [R2]   (midx: 0)
	R30 <4> <- ecg2_hal_write_spi_ptr   (midx: 0)
	CALL (*R30)   (midx: 0)
	FARG_ecg2_hal_read_bytes_num_bytes <1> <- POP   (midx: 255)
//ecg2_hal.c,113 :: 		delay_ms( 5 );
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//ecg2_hal.c,115 :: 		while(num_bytes--)
5:   (midx: 0)
	R3 <1> <- FARG_ecg2_hal_read_bytes_num_bytes   (midx: 0)
	R2 <1> <-  FARG_ecg2_hal_read_bytes_num_bytes - 1   (midx: 0)
	FARG_ecg2_hal_read_bytes_num_bytes <1> <- R2   (midx: 0)
	if (!R3) then goto 6   (midx: 0)
//ecg2_hal.c,116 :: 		*(temp_bfr_ptr++) = read_spi_ptr(0);
	FARG_ecg2_hal_read_bytes_num_bytes <1> <- PUSH(FARG_ecg2_hal_read_bytes_num_bytes)   (midx: 255)
	FARG_ecg2_hal_read_bytes_buffer_in <4> <- PUSH(FARG_ecg2_hal_read_bytes_buffer_in)   (midx: 255)
	FARG_ecg2_hal_read_bytes_reg <1> <- PUSH(FARG_ecg2_hal_read_bytes_reg)   (midx: 255)
	R25 <4> <- 0   (midx: 0)
	R30 <4> <- ecg2_hal_read_spi_ptr   (midx: 0)
	CALL (*R30)   (midx: 0)
	FARG_ecg2_hal_read_bytes_reg <1> <- POP   (midx: 255)
	FARG_ecg2_hal_read_bytes_buffer_in <4> <- POP   (midx: 255)
	FARG_ecg2_hal_read_bytes_num_bytes <1> <- POP   (midx: 255)
	R3 <4> <- ecg2_hal_read_bytes_temp_bfr_ptr_L1   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
	R2 <4> <- ecg2_hal_read_bytes_temp_bfr_ptr_L1   (midx: 0)
	R2 <4> <-  R2 + 1   (midx: 2)
	ecg2_hal_read_bytes_temp_bfr_ptr_L1 <4> <- R2   (midx: 0)
	goto	5   (midx: 0)
6:   (midx: 0)
//ecg2_hal.c,118 :: 		ECG2_hal_cs(1);
	FARG_ecg2_hal_read_bytes_reg <1> <- PUSH(FARG_ecg2_hal_read_bytes_reg)   (midx: 255)
	R25 <1> <- 1   (midx: 0)
	CALL _ecg2_hal_cs   (midx: 0)
	FARG_ecg2_hal_read_bytes_reg <1> <- POP   (midx: 255)
//ecg2_hal.c,120 :: 		}
	R25 <4> <- POP   (midx: 251)
  end
   (midx: 0)
_ecg2_hal_write_bytes:
  begin   (midx: 0)
//ecg2_hal.c,122 :: 		int8_t ecg2_hal_write_bytes ( uint8_t reg, uint8_t* buffer_out, uint8_t num_bytes)
_ecg2_hal_write_bytes:
  begin   (midx: 0)
//ecg2_hal.c,124 :: 		if (reg > 0b00011111)
	R25 <4> <- PUSH(R25)   (midx: 0)
	R2 <4> <- FARG_ecg2_hal_write_bytes_reg   (midx: 0)
	if ( R2 <= 32) then goto 7   (midx: 0)
//ecg2_hal.c,125 :: 		return -1;
	R2 <1> <- -1   (midx: 0)
	return   (midx: 0)
7:   (midx: 0)
//ecg2_hal.c,126 :: 		if (num_bytes > 0b00011111)
	R2 <4> <- FARG_ecg2_hal_write_bytes_num_bytes   (midx: 0)
	if ( R2 <= 32) then goto 8   (midx: 0)
//ecg2_hal.c,127 :: 		return -1;
	R2 <1> <- -1   (midx: 0)
	return   (midx: 0)
8:   (midx: 0)
//ecg2_hal.c,131 :: 		uint8_t *temp_bfr_ptr = buffer_out;
	ecg2_hal_write_bytes_temp_bfr_ptr_L1 <4> <- FARG_ecg2_hal_write_bytes_buffer_out   (midx: 0)
//ecg2_hal.c,132 :: 		opcode[0] = 0b01000000;
	R3 <4> <- addr(ecg2_hal_write_bytes_opcode_L1)   (midx: 0)
	R2 <1> <- 64   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
//ecg2_hal.c,133 :: 		opcode[0] |= reg;
	R2 <1> <- *R3   (midx: 0)
	R2 <1> <-  R2 | FARG_ecg2_hal_write_bytes_reg   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
//ecg2_hal.c,134 :: 		opcode[1] = 0;
	R2 <4> <-  R3 + 1   (midx: 2)
	[R2] <1> <- 0   (midx: 0)
//ecg2_hal.c,135 :: 		opcode[1] |= num_bytes;
	R3 <4> <-  R3 + 1   (midx: 2)
	R2 <1> <- *R3   (midx: 0)
	R2 <1> <-  R2 | FARG_ecg2_hal_write_bytes_num_bytes   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
//ecg2_hal.c,137 :: 		ECG2_hal_cs(0);
	R25 <1> <- 0   (midx: 0)
	CALL _ecg2_hal_cs   (midx: 0)
//ecg2_hal.c,138 :: 		delay_ms(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_hal.c,139 :: 		write_spi_ptr(opcode[0]);
	R2 <4> <- addr(ecg2_hal_write_bytes_opcode_L1)   (midx: 0)
	FARG_ecg2_hal_write_bytes_num_bytes <1> <- PUSH(FARG_ecg2_hal_write_bytes_num_bytes)   (midx: 255)
	R25 <4> <- [R2]   (midx: 0)
	R30 <4> <- ecg2_hal_write_spi_ptr   (midx: 0)
	CALL (*R30)   (midx: 0)
	FARG_ecg2_hal_write_bytes_num_bytes <1> <- POP   (midx: 255)
//ecg2_hal.c,140 :: 		write_spi_ptr(opcode[1]);
	R2 <4> <- addr(ecg2_hal_write_bytes_opcode_L1)   (midx: 0)
	R2 <4> <-  R2 + 1   (midx: 2)
	FARG_ecg2_hal_write_bytes_num_bytes <1> <- PUSH(FARG_ecg2_hal_write_bytes_num_bytes)   (midx: 255)
	R25 <4> <- [R2]   (midx: 0)
	R30 <4> <- ecg2_hal_write_spi_ptr   (midx: 0)
	CALL (*R30)   (midx: 0)
	FARG_ecg2_hal_write_bytes_num_bytes <1> <- POP   (midx: 255)
//ecg2_hal.c,142 :: 		while(num_bytes--)
11:   (midx: 0)
	R3 <1> <- FARG_ecg2_hal_write_bytes_num_bytes   (midx: 0)
	R2 <1> <-  FARG_ecg2_hal_write_bytes_num_bytes - 1   (midx: 0)
	FARG_ecg2_hal_write_bytes_num_bytes <1> <- R2   (midx: 0)
	if (!R3) then goto 12   (midx: 0)
//ecg2_hal.c,143 :: 		write_spi_ptr(*(temp_bfr_ptr++));
	R2 <4> <- ecg2_hal_write_bytes_temp_bfr_ptr_L1   (midx: 0)
	FARG_ecg2_hal_write_bytes_num_bytes <1> <- PUSH(FARG_ecg2_hal_write_bytes_num_bytes)   (midx: 255)
	FARG_ecg2_hal_write_bytes_buffer_out <4> <- PUSH(FARG_ecg2_hal_write_bytes_buffer_out)   (midx: 255)
	FARG_ecg2_hal_write_bytes_reg <1> <- PUSH(FARG_ecg2_hal_write_bytes_reg)   (midx: 255)
	R25 <4> <- [R2]   (midx: 0)
	R30 <4> <- ecg2_hal_write_spi_ptr   (midx: 0)
	CALL (*R30)   (midx: 0)
	FARG_ecg2_hal_write_bytes_reg <1> <- POP   (midx: 255)
	FARG_ecg2_hal_write_bytes_buffer_out <4> <- POP   (midx: 255)
	FARG_ecg2_hal_write_bytes_num_bytes <1> <- POP   (midx: 255)
	R2 <4> <- ecg2_hal_write_bytes_temp_bfr_ptr_L1   (midx: 0)
	R2 <4> <-  R2 + 1   (midx: 2)
	ecg2_hal_write_bytes_temp_bfr_ptr_L1 <4> <- R2   (midx: 0)
	goto	11   (midx: 0)
12:   (midx: 0)
//ecg2_hal.c,144 :: 		delay_ms(10);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_hal.c,145 :: 		ECG2_hal_cs(1);
	FARG_ecg2_hal_write_bytes_reg <1> <- PUSH(FARG_ecg2_hal_write_bytes_reg)   (midx: 255)
	R25 <1> <- 1   (midx: 0)
	CALL _ecg2_hal_cs   (midx: 0)
	FARG_ecg2_hal_write_bytes_reg <1> <- POP   (midx: 255)
//ecg2_hal.c,147 :: 		}
	R25 <4> <- POP   (midx: 251)
  end
   (midx: 0)
_ecg2_hal_send_command:
  begin   (midx: 0)
//ecg2_hal.c,149 :: 		void ecg2_hal_send_command (uint8_t command)
_ecg2_hal_send_command:
  begin   (midx: 0)
//ecg2_hal.c,151 :: 		ECG2_CS = 0; // select chip
	R2 <1> <- LX(ECG2_CS)   (midx: 0)
	ECG2_CS <0> <- 0   (midx: 0)
	LX(ECG2_CS) <1> <- R2   (midx: 0)
//ecg2_hal.c,152 :: 		Delay_us(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_hal.c,153 :: 		write_spi_ptr( command ); // send command
	R25 <4> <- FARG_ecg2_hal_send_command_command   (midx: 0)
	R30 <4> <- ecg2_hal_write_spi_ptr   (midx: 0)
	CALL (*R30)   (midx: 0)
//ecg2_hal.c,154 :: 		Delay_us(10);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_hal.c,155 :: 		ECG2_CS = 1; // deselect chip
	R2 <1> <- LX(ECG2_CS)   (midx: 0)
	ECG2_CS <0> <- 1   (midx: 0)
	LX(ECG2_CS) <1> <- R2   (midx: 0)
//ecg2_hal.c,156 :: 		Delay_us(10);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
  end
   (midx: 0)
