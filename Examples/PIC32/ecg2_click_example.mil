_calculate_ecg_channel:
  begin   (midx: 0)
//ecg2_click_example.c,52 :: 		double calculate_ecg_channel( unsigned char *buffer, unsigned short index, double refv, double gain, double offset_voltage )
_calculate_ecg_channel:
  begin   (midx: 0)
   (midx: 0)
	R16 <4> <- FARG_calculate_ecg_channel_offset_voltage   (midx: 0)
//ecg2_click_example.c,54 :: 		int adc_value = 0;
   (midx: 0)
//ecg2_click_example.c,56 :: 		adc_value = buffer[index];
	R2 <4> <- FARG_calculate_ecg_channel_index   (midx: 0)
	R2 <4> <-  FARG_calculate_ecg_channel_buffer + R2   (midx: 2)
	R2 <1> <- *R2   (midx: 0)
   (midx: 0)
	R3 <2> <- R2   (midx: 0)
//ecg2_click_example.c,57 :: 		adc_value <<= 8;
   (midx: 0)
	R2 <4> <- R3   (midx: 0)
	R3 <2> <-  R2 shl 8   (midx: 5)
//ecg2_click_example.c,58 :: 		adc_value |= buffer[index + 1];
	R2 <2> <- FARG_calculate_ecg_channel_index   (midx: 0)
	R2 <2> <-  R2 + 1   (midx: 0)
	R2 <4> <- R2   (midx: 0)
	R2 <4> <-  FARG_calculate_ecg_channel_buffer + R2   (midx: 2)
	R2 <1> <- *R2   (midx: 0)
	R2 <2> <- R2   (midx: 0)
	R2 <2> <-  R3 | R2   (midx: 5)
//ecg2_click_example.c,59 :: 		return ( ((double)adc_value * (refV / (32768 - 1))) / gain ) - offset_voltage;
	R2 <4> <- (type cast)R2   (midx: 0)
	R2 <4> <- R2   (midx: 0)
	FLOC_calculate_ecg_channel+0 <4> <- R2   (midx: 0)
	R6 <4> <- 3.276700E+004   (midx: 0)
	R2 <4> <-  FARG_calculate_ecg_channel_refv / R6   (midx: 9)
	R4 <4> <- FLOC_calculate_ecg_channel+0   (midx: 0)
	R2 <4> <-  R4 * R2   (midx: 9)
	R2 <4> <-  R2 / FARG_calculate_ecg_channel_gain   (midx: 9)
   (midx: 0)
	R2 <4> <-  R2 - R16   (midx: 9)
	R2 <4> <- R2   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_setup_ecg:
  begin   (midx: 0)
//ecg2_click_example.c,62 :: 		void setup_ecg()
_setup_ecg:
  begin   (midx: 0)
//ecg2_click_example.c,64 :: 		uint8_t tempctr = 0;
	R25 <4> <- PUSH(R25)   (midx: 0)
	R26 <4> <- PUSH(R26)   (midx: 0)
	R27 <4> <- PUSH(R27)   (midx: 0)
	R28 <4> <- PUSH(R28)   (midx: 0)
   (midx: 0)
//ecg2_click_example.c,65 :: 		ecg2_hal_send_command(SDATAC_COMMAND);
	R25 <1> <- 17   (midx: 0)
	CALL _ecg2_hal_send_command   (midx: 0)
//ecg2_click_example.c,66 :: 		ecg2_oscillator_clock_enable(true);
	R25 <1> <- 1   (midx: 0)
	CALL _ecg2_oscillator_clock_enable   (midx: 0)
//ecg2_click_example.c,68 :: 		ecg2_set_output_data_rate(SPS_125);
	R25 <1> <- 6   (midx: 0)
	CALL _ecg2_set_output_data_rate   (midx: 0)
//ecg2_click_example.c,69 :: 		ecg2_set_test_source(TEST_SOURCE_EXTERNAL);
	R25 <1> <- 0   (midx: 0)
	CALL _ecg2_set_test_source   (midx: 0)
//ecg2_click_example.c,71 :: 		ecg2_power_down_reference_buffer_enable(true);
	R25 <1> <- 1   (midx: 0)
	CALL _ecg2_power_down_reference_buffer_enable   (midx: 0)
//ecg2_click_example.c,72 :: 		ecg2_set_reference_voltage(vref_2_4V);
	R25 <1> <- 0   (midx: 0)
	CALL _ecg2_set_reference_voltage   (midx: 0)
//ecg2_click_example.c,73 :: 		ecg2_rld_measurement_enable(true);
	R25 <1> <- 1   (midx: 0)
	CALL _ecg2_rld_measurement_enable   (midx: 0)
//ecg2_click_example.c,74 :: 		ecg2_rldref_source_select(RLDEF_SIGNAL_INTERNAL);
	R25 <1> <- 1   (midx: 0)
	CALL _ecg2_rldref_source_select   (midx: 0)
//ecg2_click_example.c,75 :: 		ecg2_rld_buffer_enable(true);
	R25 <1> <- 1   (midx: 0)
	CALL _ecg2_rld_buffer_enable   (midx: 0)
//ecg2_click_example.c,78 :: 		ecg2_lead_off_comparator_threshold_set(POSITIVE_70);
	R25 <1> <- 7   (midx: 0)
	CALL _ecg2_lead_off_comparator_threshold_set   (midx: 0)
//ecg2_click_example.c,79 :: 		ecg2_vlead_off_enable(false);
	R25 <1> <- 0   (midx: 0)
	CALL _ecg2_vlead_off_enable   (midx: 0)
//ecg2_click_example.c,80 :: 		ecg2_ilead_off_magnitude_set(NA_4);
	R25 <1> <- 0   (midx: 0)
	CALL _ecg2_ilead_off_magnitude_set   (midx: 0)
//ecg2_click_example.c,81 :: 		ecg2_flead_off_frequency_set(3);
	R25 <1> <- 3   (midx: 0)
	CALL _ecg2_flead_off_frequency_set   (midx: 0)
//ecg2_click_example.c,84 :: 		ecg2_configure_channel(1, false, 0, 1);
	R28 <1> <- 1   (midx: 0)
	R27 <1> <- 0   (midx: 0)
	R26 <1> <- 0   (midx: 0)
	R25 <1> <- 1   (midx: 0)
	CALL _ecg2_configure_channel   (midx: 0)
//ecg2_click_example.c,87 :: 		ecg2_configure_channel(2, false, 0, 1);
	R28 <1> <- 1   (midx: 0)
	R27 <1> <- 0   (midx: 0)
	R26 <1> <- 0   (midx: 0)
	R25 <1> <- 2   (midx: 0)
	CALL _ecg2_configure_channel   (midx: 0)
//ecg2_click_example.c,90 :: 		ecg2_configure_channel(3, false, 0, 1);
	R28 <1> <- 1   (midx: 0)
	R27 <1> <- 0   (midx: 0)
	R26 <1> <- 0   (midx: 0)
	R25 <1> <- 3   (midx: 0)
	CALL _ecg2_configure_channel   (midx: 0)
//ecg2_click_example.c,93 :: 		ecg2_configure_channel(4, false, 0, 1);
	R28 <1> <- 1   (midx: 0)
	R27 <1> <- 0   (midx: 0)
	R26 <1> <- 0   (midx: 0)
	R25 <1> <- 4   (midx: 0)
	CALL _ecg2_configure_channel   (midx: 0)
//ecg2_click_example.c,95 :: 		ecg2_right_leg_positive_drive_set(2);
	R25 <1> <- 2   (midx: 0)
	CALL _ecg2_right_leg_positive_drive_set   (midx: 0)
//ecg2_click_example.c,97 :: 		ecg2_right_leg_negative_drive_set(2);
	R25 <1> <- 2   (midx: 0)
	CALL _ecg2_right_leg_negative_drive_set   (midx: 0)
//ecg2_click_example.c,99 :: 		ecg2_lead_off_positive_channel_select(5);
	R25 <1> <- 5   (midx: 0)
	CALL _ecg2_lead_off_positive_channel_select   (midx: 0)
//ecg2_click_example.c,101 :: 		ecg2_lead_off_negative_channel_select(2);
	R25 <1> <- 2   (midx: 0)
	CALL _ecg2_lead_off_negative_channel_select   (midx: 0)
//ecg2_click_example.c,103 :: 		ecg2_lead_off_current_direction_select(0);
	R25 <1> <- 0   (midx: 0)
	CALL _ecg2_lead_off_current_direction_select   (midx: 0)
//ecg2_click_example.c,105 :: 		ecg2_lead_off_comparator_enable(true);
	R25 <1> <- 1   (midx: 0)
	CALL _ecg2_lead_off_comparator_enable   (midx: 0)
//ecg2_click_example.c,107 :: 		ecg2_hal_send_command(START_COMMAND); // send START command
	R25 <1> <- 8   (midx: 0)
	CALL _ecg2_hal_send_command   (midx: 0)
//ecg2_click_example.c,108 :: 		Delay_us(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_click_example.c,109 :: 		ecg2_hal_send_command(RDATA_COMMAND); // enable read data once
	R25 <1> <- 18   (midx: 0)
	CALL _ecg2_hal_send_command   (midx: 0)
//ecg2_click_example.c,110 :: 		ECG2_CS = 0; // chip select
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_CS) <1> <- R2   (midx: 0)
//ecg2_click_example.c,111 :: 		Delay_us(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_click_example.c,112 :: 		while (ECG2_DRDY) {} // Wait for ADS1194 device to prepare output data.
2:   (midx: 0)
	R2 <1> <- LX(ECG2_DRDY)   (midx: 0)
	R2 <4> <- ECG2_DRDY   (midx: 0)
	if (!R2) then goto 3   (midx: 0)
	goto	2   (midx: 0)
3:   (midx: 0)
//ecg2_click_example.c,113 :: 		delay_us(5);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//ecg2_click_example.c,114 :: 		for (tempctr = 0; tempctr < num_bytes_sample; tempctr++) { ecg_data_sample[tempctr] = SPI_Read(0); } // read ADS1194 output data, one sample
   (midx: 0)
   (midx: 0)
	R4 <1> <- 0   (midx: 0)
	R4 <1> <- R4   (midx: 0)
5:   (midx: 0)
   (midx: 0)
	R2 <4> <- R4   (midx: 0)
	if ( R2 >= 19) then goto 6   (midx: 5)
	R3 <4> <- R4   (midx: 0)
	R2 <4> <- #_ecg_data_sample   (midx: 0)
	R2 <4> <-  R2 + R3   (midx: 2)
	FLOC_setup_ecg+0 <4> <- R2   (midx: 0)
	R4 <1> <- PUSH(R4)   (midx: 255)
	R25 <4> <- 0   (midx: 0)
	CALL _SPI_Read   (midx: 0)
	R4 <1> <- POP   (midx: 255)
	R3 <4> <- FLOC_setup_ecg+0   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
	R2 <1> <-  R4 + 1   (midx: 0)
	R4 <1> <- R2   (midx: 0)
   (midx: 0)
	R4 <1> <- R4   (midx: 0)
	goto	5   (midx: 0)
6:   (midx: 0)
//ecg2_click_example.c,117 :: 		channel1_voltage_offset = calculate_ecg_channel( ecg_data_sample, 3, vref, channel_gain, 0 );
	R28 <4> <- 2.000000E+001   (midx: 0)
	R27 <4> <- 2.400000E+003   (midx: 0)
	R26 <1> <- 3   (midx: 0)
	R25 <4> <- #_ecg_data_sample   (midx: 0)
	FARG_calculate_ecg_channel_offset_voltage <4> <- PUSH(0.000000E+000)   (midx: 0)
	CALL _calculate_ecg_channel   (midx: 0)
	_channel1_voltage_offset <4> <- R2   (midx: 0)
//ecg2_click_example.c,119 :: 		channel2_voltage_offset = calculate_ecg_channel( ecg_data_sample, 5, vref, channel_gain, 0 );
	R28 <4> <- 2.000000E+001   (midx: 0)
	R27 <4> <- 2.400000E+003   (midx: 0)
	R26 <1> <- 5   (midx: 0)
	R25 <4> <- #_ecg_data_sample   (midx: 0)
	FARG_calculate_ecg_channel_offset_voltage <4> <- PUSH(0.000000E+000)   (midx: 0)
	CALL _calculate_ecg_channel   (midx: 0)
	_channel2_voltage_offset <4> <- R2   (midx: 0)
//ecg2_click_example.c,121 :: 		channel3_voltage_offset = calculate_ecg_channel( ecg_data_sample, 7, vref, channel_gain, 0 );
	R28 <4> <- 2.000000E+001   (midx: 0)
	R27 <4> <- 2.400000E+003   (midx: 0)
	R26 <1> <- 7   (midx: 0)
	R25 <4> <- #_ecg_data_sample   (midx: 0)
	FARG_calculate_ecg_channel_offset_voltage <4> <- PUSH(0.000000E+000)   (midx: 0)
	CALL _calculate_ecg_channel   (midx: 0)
	_channel3_voltage_offset <4> <- R2   (midx: 0)
//ecg2_click_example.c,123 :: 		channel4_voltage_offset = calculate_ecg_channel( ecg_data_sample, 9, vref, channel_gain, 0 );
	R28 <4> <- 2.000000E+001   (midx: 0)
	R27 <4> <- 2.400000E+003   (midx: 0)
	R26 <1> <- 9   (midx: 0)
	R25 <4> <- #_ecg_data_sample   (midx: 0)
	FARG_calculate_ecg_channel_offset_voltage <4> <- PUSH(0.000000E+000)   (midx: 0)
	CALL _calculate_ecg_channel   (midx: 0)
	_channel4_voltage_offset <4> <- R2   (midx: 0)
//ecg2_click_example.c,124 :: 		ECG2_CS = 1;
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_CS) <1> <- R2   (midx: 0)
//ecg2_click_example.c,125 :: 		Delay_us(10);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_click_example.c,128 :: 		ecg2_hal_send_command(STOP_COMMAND); // send STOP command
	R25 <1> <- 10   (midx: 0)
	CALL _ecg2_hal_send_command   (midx: 0)
//ecg2_click_example.c,129 :: 		Delay_us(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_click_example.c,130 :: 		ecg2_hal_send_command(SDATAC_COMMAND); // SDATAC mode
	R25 <1> <- 17   (midx: 0)
	CALL _ecg2_hal_send_command   (midx: 0)
//ecg2_click_example.c,134 :: 		ecg2_configure_channel(1, false, 6, 0);
	R28 <1> <- 0   (midx: 0)
	R27 <1> <- 6   (midx: 0)
	R26 <1> <- 0   (midx: 0)
	R25 <1> <- 1   (midx: 0)
	CALL _ecg2_configure_channel   (midx: 0)
//ecg2_click_example.c,136 :: 		ecg2_configure_channel(2, false, 6, 0);
	R28 <1> <- 0   (midx: 0)
	R27 <1> <- 6   (midx: 0)
	R26 <1> <- 0   (midx: 0)
	R25 <1> <- 2   (midx: 0)
	CALL _ecg2_configure_channel   (midx: 0)
//ecg2_click_example.c,138 :: 		ecg2_configure_channel(3, false, 6, 0);
	R28 <1> <- 0   (midx: 0)
	R27 <1> <- 6   (midx: 0)
	R26 <1> <- 0   (midx: 0)
	R25 <1> <- 3   (midx: 0)
	CALL _ecg2_configure_channel   (midx: 0)
//ecg2_click_example.c,141 :: 		ecg2_configure_channel(4, false, 6, 4);
	R28 <1> <- 4   (midx: 0)
	R27 <1> <- 6   (midx: 0)
	R26 <1> <- 0   (midx: 0)
	R25 <1> <- 4   (midx: 0)
	CALL _ecg2_configure_channel   (midx: 0)
//ecg2_click_example.c,142 :: 		ecg2_hal_send_command(START_COMMAND); // send START command
	R25 <1> <- 8   (midx: 0)
	CALL _ecg2_hal_send_command   (midx: 0)
//ecg2_click_example.c,143 :: 		Delay_us(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_click_example.c,144 :: 		ecg2_hal_send_command(RDATAC_COMMAND); // enable read data in continuous mode
	R25 <1> <- 16   (midx: 0)
	CALL _ecg2_hal_send_command   (midx: 0)
//ecg2_click_example.c,145 :: 		ECG2_CS = 0; // chip select
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_CS) <1> <- R2   (midx: 0)
//ecg2_click_example.c,146 :: 		Delay_us(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_click_example.c,147 :: 		}
	R28 <4> <- POP   (midx: 251)
	R27 <4> <- POP   (midx: 251)
	R26 <4> <- POP   (midx: 251)
	R25 <4> <- POP   (midx: 251)
  end
   (midx: 0)
_main:
  begin   (midx: 0)
//ecg2_click_example.c,149 :: 		void main() {
_main:
  begin   (midx: 0)
//ecg2_click_example.c,151 :: 		uint64_t i = 0;
   (midx: 0)
//ecg2_click_example.c,155 :: 		double time_value = 0.0;
   (midx: 0)
	main_time_value_L0 <-initialize(0.000000E+000)   (midx: 0)
//ecg2_click_example.c,156 :: 		UART5_Init(57600);
	R25 <4> <- 57600   (midx: 0)
	CALL _UART5_Init   (midx: 0)
//ecg2_click_example.c,157 :: 		delay_ms(300);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//ecg2_click_example.c,158 :: 		Uart_Write_Text("START\r\n");
	R25 <4> <- #?lstr1_ecg2_click_example   (midx: 0)
	CALL _UART_Write_Text   (midx: 0)
//ecg2_click_example.c,160 :: 		AD1PCFG = 0xFFFF;
	R2 <4> <- 65535   (midx: 0)
	AD1PCFG <4> <- R2   (midx: 0)
//ecg2_click_example.c,162 :: 		ECG2_DRDY_DIR = 1;
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_DRDY_DIR) <1> <- R2   (midx: 0)
//ecg2_click_example.c,164 :: 		ECG2_PWDN_DIR = 0;
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_PWDN_DIR) <1> <- R2   (midx: 0)
//ecg2_click_example.c,165 :: 		ECG2_PWDN = 1; // ECG2 is powered up
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_PWDN) <1> <- R2   (midx: 0)
//ecg2_click_example.c,167 :: 		ECG2_CS_DIR = 0;
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_CS_DIR) <1> <- R2   (midx: 0)
//ecg2_click_example.c,168 :: 		ECG2_CS = 1; // deselect ECG2 click
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_CS) <1> <- R2   (midx: 0)
//ecg2_click_example.c,170 :: 		ECG2_RESET_DIR = 0;
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_RESET_DIR) <1> <- R2   (midx: 0)
//ecg2_click_example.c,171 :: 		ECG2_RESET = 1; // pull RESET bit low for 18 CLK to RESET ECG device
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_RESET) <1> <- R2   (midx: 0)
//ecg2_click_example.c,174 :: 		SPI3_Init_Advanced ( _SPI_MASTER, _SPI_8_BIT, 1, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE );
	R28 <2> <- 0   (midx: 0)
	R27 <2> <- 1   (midx: 0)
	R26 <2> <- 0   (midx: 0)
	R25 <2> <- 32   (midx: 0)
	FARG_SPI3_Init_Advanced_edge <2> <- PUSH(0)   (midx: 0)
	FARG_SPI3_Init_Advanced_clock_idle <2> <- PUSH(0)   (midx: 0)
	R2 <2> <- 512   (midx: 0)
	FARG_SPI3_Init_Advanced_data_sample <2> <- PUSH(R2)   (midx: 0)
	CALL _SPI3_Init_Advanced   (midx: 0)
//ecg2_click_example.c,175 :: 		delay_ms(300);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//ecg2_click_example.c,177 :: 		ecg2_hal_init();
	CALL _ecg2_hal_init   (midx: 0)
//ecg2_click_example.c,180 :: 		ECG2_RESET = 0;
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_RESET) <1> <- R2   (midx: 0)
//ecg2_click_example.c,181 :: 		Delay_us(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_click_example.c,182 :: 		ECG2_RESET = 1;
	R2 <1> <- 1   (midx: 0)
	LX(ECG2_RESET) <1> <- R2   (midx: 0)
//ecg2_click_example.c,184 :: 		Delay_ms(1000);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
//ecg2_click_example.c,187 :: 		while (SPI3STAT.B0 != 0) { SPI_Read(0); }
16:   (midx: 0)
	R2 <1> <- byte(SPI3STAT)   (midx: 0)
	R2 <4> <- SPI3STAT   (midx: 0)
	if (!R2) then goto 17   (midx: 21)
	R25 <4> <- 0   (midx: 0)
	CALL _SPI_Read   (midx: 0)
	goto	16   (midx: 0)
17:   (midx: 0)
//ecg2_click_example.c,190 :: 		ecg2_hal_send_command(SDATAC_COMMAND);
	R25 <1> <- 17   (midx: 0)
	CALL _ecg2_hal_send_command   (midx: 0)
//ecg2_click_example.c,191 :: 		setup_ecg();
	CALL _setup_ecg   (midx: 0)
//ecg2_click_example.c,194 :: 		while (1)
18:   (midx: 0)
//ecg2_click_example.c,197 :: 		while (ECG2_DRDY) {} // Wait for ADS1194 device to prepare output data. Data is ready every 8 milliseconds
20:   (midx: 0)
	R2 <1> <- LX(ECG2_DRDY)   (midx: 0)
	R2 <4> <- ECG2_DRDY   (midx: 0)
	if (!R2) then goto 21   (midx: 0)
	goto	20   (midx: 0)
21:   (midx: 0)
//ecg2_click_example.c,198 :: 		Delay_us(5);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//ecg2_click_example.c,199 :: 		for (i=0; i<num_bytes_sample; i++) { ecg_data_sample[i] = SPI_Read(0); } // read ADS1194 output data, one sample
   (midx: 0)
   (midx: 0)
	R6 <8> <- 0   (midx: 0)
	R4 <8> <- R6   (midx: 0)
23:   (midx: 0)
   (midx: 0)
	if ( R4 >= 19) then goto 24   (midx: 3)
	R2 <4> <- #_ecg_data_sample   (midx: 0)
	R2 <4> <-  R2 + R4   (midx: 2)
	FLOC_main+48 <4> <- R2   (midx: 0)
	R4 <8> <- PUSH(R4)   (midx: 255)
	R25 <4> <- 0   (midx: 0)
	CALL _SPI_Read   (midx: 0)
	R4 <8> <- POP   (midx: 255)
	R3 <4> <- FLOC_main+48   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
   (midx: 0)
	R2 <8> <-  R4 + 1   (midx: 7)
   (midx: 0)
	R6 <8> <- R2   (midx: 0)
   (midx: 0)
	R4 <8> <- R6   (midx: 0)
	goto	23   (midx: 0)
24:   (midx: 0)
//ecg2_click_example.c,200 :: 		if (ecg_data_sample[5]  == 0 ) Uart_Write_Text("ERROR READING\r\n");
	R2 <1> <- _ecg_data_sample+5   (midx: 0)
	if ( R2 != 0) then goto 26   (midx: 0)
	R25 <4> <- #?lstr2_ecg2_click_example   (midx: 0)
	CALL _UART_Write_Text   (midx: 0)
26:   (midx: 0)
//ecg2_click_example.c,202 :: 		time_value += 8.0;
	R6 <4> <- main_time_value_L0   (midx: 0)
	R4 <4> <- 8.000000E+000   (midx: 0)
	R2 <4> <-  R6 + R4   (midx: 9)
	main_time_value_L0 <4> <- R2   (midx: 0)
//ecg2_click_example.c,205 :: 		channel1_voltage = calculate_ecg_channel( ecg_data_sample, 3, vref, channel_gain, channel1_voltage_offset );
	R28 <4> <- 2.000000E+001   (midx: 0)
	R27 <4> <- 2.400000E+003   (midx: 0)
	R26 <1> <- 3   (midx: 0)
	R25 <4> <- #_ecg_data_sample   (midx: 0)
	R2 <4> <- _channel1_voltage_offset   (midx: 0)
	FARG_calculate_ecg_channel_offset_voltage <4> <- PUSH(R2)   (midx: 0)
	CALL _calculate_ecg_channel   (midx: 0)
	_channel1_voltage <4> <- R2   (midx: 0)
//ecg2_click_example.c,206 :: 		channel2_voltage = calculate_ecg_channel( ecg_data_sample, 5, vref, channel_gain, channel2_voltage_offset );
	R28 <4> <- 2.000000E+001   (midx: 0)
	R27 <4> <- 2.400000E+003   (midx: 0)
	R26 <1> <- 5   (midx: 0)
	R25 <4> <- #_ecg_data_sample   (midx: 0)
	R2 <4> <- _channel2_voltage_offset   (midx: 0)
	FARG_calculate_ecg_channel_offset_voltage <4> <- PUSH(R2)   (midx: 0)
	CALL _calculate_ecg_channel   (midx: 0)
	_channel2_voltage <4> <- R2   (midx: 0)
//ecg2_click_example.c,207 :: 		sprintf(final_string,"%.2f", channel2_voltage);  // convert values to string and send to MikroPlot
	R3 <4> <- addr(main_final_string_L0)   (midx: 0)
	FARG_sprintf_8 <4> <- PUSH(R2)   (midx: 0)
	R2 <4> <- #?lstr_3_ecg2_click_example   (midx: 0)
	FARG_sprintf_f <4> <- PUSH(R2)   (midx: 0)
	FARG_sprintf_wh <4> <- PUSH(R3)   (midx: 0)
	CALL _sprintf   (midx: 0)
//ecg2_click_example.c,208 :: 		strcat(final_string, ",");
	R2 <4> <- addr(main_final_string_L0)   (midx: 0)
	R26 <4> <- #?lstr4_ecg2_click_example   (midx: 0)
	R25 <4> <- R2   (midx: 0)
	CALL _strcat   (midx: 0)
//ecg2_click_example.c,209 :: 		sprintf(time_string,"%.2f", time_value);
	R3 <4> <- addr(main_time_string_L0)   (midx: 0)
	R2 <4> <- main_time_value_L0   (midx: 0)
	FARG_sprintf_8 <4> <- PUSH(R2)   (midx: 0)
	R2 <4> <- #?lstr_5_ecg2_click_example   (midx: 0)
	FARG_sprintf_f <4> <- PUSH(R2)   (midx: 0)
	FARG_sprintf_wh <4> <- PUSH(R3)   (midx: 0)
	CALL _sprintf   (midx: 0)
//ecg2_click_example.c,210 :: 		strcat(final_string, time_string);
	R3 <4> <- addr(main_time_string_L0)   (midx: 0)
	R2 <4> <- addr(main_final_string_L0)   (midx: 0)
	R26 <4> <- R3   (midx: 0)
	R25 <4> <- R2   (midx: 0)
	CALL _strcat   (midx: 0)
//ecg2_click_example.c,211 :: 		Uart_Write_Text(final_string);
	R2 <4> <- addr(main_final_string_L0)   (midx: 0)
	R25 <4> <- R2   (midx: 0)
	CALL _UART_Write_Text   (midx: 0)
//ecg2_click_example.c,212 :: 		Uart_Write_Text("\r\n");
	R25 <4> <- #?lstr6_ecg2_click_example   (midx: 0)
	CALL _UART_Write_Text   (midx: 0)
//ecg2_click_example.c,215 :: 		channel3_voltage = calculate_ecg_channel( ecg_data_sample, 7, vref, channel_gain, channel3_voltage_offset );
	R28 <4> <- 2.000000E+001   (midx: 0)
	R27 <4> <- 2.400000E+003   (midx: 0)
	R26 <1> <- 7   (midx: 0)
	R25 <4> <- #_ecg_data_sample   (midx: 0)
	R2 <4> <- _channel3_voltage_offset   (midx: 0)
	FARG_calculate_ecg_channel_offset_voltage <4> <- PUSH(R2)   (midx: 0)
	CALL _calculate_ecg_channel   (midx: 0)
	_channel3_voltage <4> <- R2   (midx: 0)
//ecg2_click_example.c,217 :: 		channel4_voltage = calculate_ecg_channel( ecg_data_sample, 9, vref, channel_gain, channel4_voltage_offset );
	R28 <4> <- 2.000000E+001   (midx: 0)
	R27 <4> <- 2.400000E+003   (midx: 0)
	R26 <1> <- 9   (midx: 0)
	R25 <4> <- #_ecg_data_sample   (midx: 0)
	R2 <4> <- _channel4_voltage_offset   (midx: 0)
	FARG_calculate_ecg_channel_offset_voltage <4> <- PUSH(R2)   (midx: 0)
	CALL _calculate_ecg_channel   (midx: 0)
	_channel4_voltage <4> <- R2   (midx: 0)
//ecg2_click_example.c,219 :: 		}
	goto	18   (midx: 0)
  end
   (midx: 0)
